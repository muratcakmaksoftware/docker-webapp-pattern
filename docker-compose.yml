version: "3.9"

services:
  php:
    restart: always
    container_name: app-php
    build:
      context: ./docker/images/php
      dockerfile: Dockerfile
    working_dir: /var/www/html
    expose:
      - ${PHP_INTERNAL_PORT:-9000}
    volumes:
      - ./:/var/www/html
    networks:
      default:
        ipv4_address: 172.20.0.10

  web:
    restart: always
    container_name: app-nginx
    build:
      context: ./docker/images/nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    networks:
      default:
        ipv4_address: 172.20.0.20

  #PHP > Dockerfile göre gerekli kütüphaneleri ayarlanması gerekir. Default olarak postgresql alınmıştır.
  postgresql:
    restart: always
    container_name: app-postgresql
    build:
      context: ./docker/images/postgresql
      dockerfile: Dockerfile
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-db_name}
      POSTGRES_USER: ${POSTGRES_USER:-root}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-123456}
    ports:
      - '5432:5432'
    volumes:
      - ./docker/images/postgresql/data:/var/lib/postgresql/data
    networks:
      default:
        ipv4_address: 172.20.0.30

  #PHP > Dockerfile göre gerekli kütüphaneleri ayarlanması gerekir. Mysql kullanacaksanız PHP Dockerfile kütüphanelerini düzeltiniz.
  #  mysql:
  #    restart: always
  #    container_name: app-mysql
  #    build:
  #      context: ./docker/images/mysql
  #      dockerfile: Dockerfile
  #    environment:
  #      MYSQL_DATABASE: ${MYSQL_DATABASE:-db_name}
  #      MYSQL_USER: ${MYSQL_USER:-db_user_name}
  #      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-123456}
  #      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-12346789}
  #    ports:
  #      - "3306:3306"
  #    volumes:
  #      - ./images/mysql/data:/var/lib/mysql
  #    networks:
  #      default:
  #        ipv4_address: 172.20.0.35

  redis:
    restart: always
    container_name: app-redis
    build:
      context: ./docker/images/redis
      dockerfile: Dockerfile
    ports:
      - "6379:6379"
    volumes:
      - ./docker/images/redis/data:/data
    command: redis-server --requirepass ${REDIS_PASSWORD:-123456}
    networks:
      default:
        ipv4_address: 172.20.0.40

  rabbitmq:
    restart: always
    container_name: app-rabbitmq
    build:
      context: ./docker/images/rabbitmq
      dockerfile: Dockerfile
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./docker/images/rabbitmq/data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-guest}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_DEFAULT_VHOST:-/}
    networks:
      default:
        ipv4_address: 172.20.0.50

  mongodb:
    restart: always
    container_name: app-mongodb
    build:
      context: ./docker/images/mongodb
      dockerfile: Dockerfile
    ports:
      - "27017:27017"
    volumes:
      - ./docker/images/mongodb/data/db:/data/db
      - ./docker/images/mongodb/data/configdb:/data/configdb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-mongoadmin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-mongoadmin}
    networks:
      default:
        ipv4_address: 172.20.0.60

  #Eğer istiyorsanız mangodb GUI tool olarak mongo express kullanabiliriz.
  mongo-express:
    restart: always
    container_name: app-mongo-express
    build:
      context: ./docker/images/mongo-express
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME:-mongoadmin}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-mongoadmin}
      ME_CONFIG_MONGODB_SERVER: mongodb
    networks:
      default:
        ipv4_address: 172.20.0.70

  #Multi-node cluster
  elasticsearch-01:
    #restart: no
    container_name: app-elasticsearch-01
    build:
      context: ./docker/images/elasticsearch
      dockerfile: Dockerfile
    environment:
      - node.name=elasticsearch-01 #Düğüm adı
      - cluster.name=es-myapp-cluster
      - discovery.seed_hosts=elasticsearch-02 #,elasticsearch-02,... #Dikkat kendi servisi eklenmemelidir. #Diğer uygun düğümlerin bulunmasını sağlarız.
      - cluster.initial_master_nodes=elasticsearch-01,elasticsearch-02 #Ana elasticsearch servislerinin hepsi yazılır. Sebebi bir ana düğüm çöktüğünde diğer düğümler devam etmelidir.
      - bootstrap.memory_lock=true # İşletim sistemini yaptığı fazla bellek kullanmak ve kullanılmayan belleği örneğin disk ile memory swap(takas/değişim) için kullanması gibi şeyler performansı düşürdüğünden değişimi kapatmak ve elasticsearch performans için true önerilir.
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m" #Java parametleridir. -Xms512m (min heap memory) -Xmx512m (Heap’in max heap memory) # Düğümün kullanılmasına izin verilen min ve maks ram miktarının belirlenmesidir.

    #Geliştirme veya test ortamı için kullanılabilir hazır ayar. Sadece tek elasticsearch servisi olmalıdır.
#    environment:
#      - node.name=node01
#      - cluster.name=es-myapp-cluster
#      - discovery.type=single-node #bazı configuration atlamaktadır.
#      - bootstrap.memory_lock=true
#      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"

    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9300:9300" # port 9300 for communication between nodes within the cluster (Required)
      - "9200:9200" # port 9200 for requests (Optional)
    volumes:
      - ./docker/images/elasticsearch/data/01:/usr/share/elasticsearch/data
    networks:
      default:
        ipv4_address: 172.20.0.80

  elasticsearch-02:
    #restart: no
    container_name: app-elasticsearch-02
    build:
      context: ./docker/images/elasticsearch
      dockerfile: Dockerfile
    environment:
      - node.name=elasticsearch-02
      - cluster.name=es-myapp-cluster
      - discovery.seed_hosts=elasticsearch-01
      - cluster.initial_master_nodes=elasticsearch-01,elasticsearch-02
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./docker/images/elasticsearch/data/02:/usr/share/elasticsearch/data
    networks:
      default:
        ipv4_address: 172.20.0.90

networks:
  default:
    driver: bridge
    name: default_network
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  myapp:
    driver: local